from typing import Dict, List, Any
from datamodel import Listing, Observation, Order, OrderDepth, ProsperityEncoder, Symbol, Trade, TradingState
import collections
from collections import defaultdict
import random
import math
import copy
import statistics
import numpy as np
import json

empty_dict = {'AMETHYSTS':0}


def def_value():
    return copy.deepcopy(empty_dict)


INF = int(1e9)



class Logger:
    def __init__(self) -> None:
        self.logs = ""
        self.max_log_length = 3750

    def print(self, *objects: Any, sep: str = " ", end: str = "\n") -> None:
        self.logs += sep.join(map(str, objects)) + end

    def flush(self, state: TradingState, orders: dict[Symbol, list[Order]], conversions: int, trader_data: str) -> None:
        base_length = len(self.to_json([
            self.compress_state(state, ""),
            self.compress_orders(orders),
            conversions,
            "",
            "",
        ]))

        # We truncate state.traderData, trader_data, and self.logs to the same max. length to fit the log limit
        max_item_length = (self.max_log_length - base_length) // 3

        print(self.to_json([
            self.compress_state(state, self.truncate(state.traderData, max_item_length)),
            self.compress_orders(orders),
            conversions,
            self.truncate(trader_data, max_item_length),
            self.truncate(self.logs, max_item_length),
        ]))

        self.logs = ""

    def compress_state(self, state: TradingState, trader_data: str) -> list[Any]:
        return [
            state.timestamp,
            trader_data,
            self.compress_listings(state.listings),
            self.compress_order_depths(state.order_depths),
            self.compress_trades(state.own_trades),
            self.compress_trades(state.market_trades),
            state.position,
            self.compress_observations(state.observations),
        ]

    def compress_listings(self, listings: dict[Symbol, Listing]) -> list[list[Any]]:
        compressed = []
        for listing in listings.values():
            compressed.append([listing["symbol"], listing["product"], listing["denomination"]])

        return compressed

    def compress_order_depths(self, order_depths: dict[Symbol, OrderDepth]) -> dict[Symbol, list[Any]]:
        compressed = {}
        for symbol, order_depth in order_depths.items():
            compressed[symbol] = [order_depth.buy_orders, order_depth.sell_orders]

        return compressed

    def compress_trades(self, trades: dict[Symbol, list[Trade]]) -> list[list[Any]]:
        compressed = []
        for arr in trades.values():
            for trade in arr:
                compressed.append([
                    trade.symbol,
                    trade.price,
                    trade.quantity,
                    trade.buyer,
                    trade.seller,
                    trade.timestamp,
                ])

        return compressed

    def compress_observations(self, observations: Observation) -> list[Any]:
        conversion_observations = {}
        for product, observation in observations.conversionObservations.items():
            conversion_observations[product] = [
                observation.bidPrice,
                observation.askPrice,
                observation.transportFees,
                observation.exportTariff,
                observation.importTariff,
                observation.sunlight,
                observation.humidity,
            ]

        return [observations.plainValueObservations, conversion_observations]

    def compress_orders(self, orders: dict[Symbol, list[Order]]) -> list[list[Any]]:
        compressed = []
        for arr in orders.values():
            for order in arr:
                compressed.append([order.symbol, order.price, order.quantity])

        return compressed

    def to_json(self, value: Any) -> str:
        return json.dumps(value, cls=ProsperityEncoder, separators=(",", ":"))

    def truncate(self, value: str, max_length: int) -> str:
        if len(value) <= max_length:
            return value

        return value[:max_length - 3] + "..."

logger = Logger()



class Trader:
    position = copy.deepcopy(empty_dict)
    POSITION_LIMIT = {"AMETHYSTS": 20}
    volume_traded = copy.deepcopy(empty_dict)
    b_mid = []
    b_spread = []
    steps = 0
    cpnl = defaultdict(lambda: 0)
    def values_extract(self, order_dict, buy=0):
        tot_vol = 0
        best_val = -1
        mxvol = -1

        for ask, vol in order_dict.items():
            if (buy == 0):
                vol *= -1
            tot_vol += vol
            if tot_vol > mxvol:
                mxvol = vol
                best_val = ask

        return tot_vol, best_val

    def run(self, state: TradingState) -> tuple[dict[Symbol, list[Order]], int, str]:
        #print("traderData: " + state.traderData)
        #print("Observations: " + str(state.observations))

        result = {'AMETHYSTS': [],'STARFRUIT':[]}
        #print(f'Initial {result}')
        for key, val in state.position.items():
            self.position[key] = val
        #print("Reached here")
       # for key, val in self.position.items():
            #print(f'{key} position: {val}')
        #timestamp = state.timestamp
        acc_bid = {'AMETHYSTS': 10000}
        acc_ask = {'AMETHYSTS': 10000}
        self.steps += 1
        for product in state.order_depths.keys():
            if product == 'AMETHYSTS':
                order_depth: OrderDepth = state.order_depths['AMETHYSTS']
                orders = self.compute_orders_AMETHYSTS("AMETHYSTS", order_depth, acc_bid['AMETHYSTS'], acc_ask['AMETHYSTS'])
                result['AMETHYSTS'] += orders
            if product == 'STARFRUIT':
                limit = 20

                D = {(4734.0, 4741.0): [0, 17], (4735.0, 4736.0): [0, 1], (4735.0, 4739.0): [0, 1],
                     (4735.0, 4742.0): [11, 0], (4736.0, 4737.0): [0, 16], (4736.0, 4740.0): [0, 1],
                     (4736.0, 4741.0): [2, 1], (4736.0, 4742.0): [3, 1], (4736.0, 4743.0): [20, 2],
                     (4737.0, 4738.0): [0, 12], (4737.0, 4739.0): [1, 0], (4737.0, 4741.0): [2, 1],
                     (4737.0, 4742.0): [1, 2], (4737.0, 4743.0): [48, 30], (4737.0, 4744.0): [2, 22],
                     (4738.0, 4739.0): [0, 18], (4738.0, 4740.0): [0, 2], (4738.0, 4741.0): [5, 0],
                     (4738.0, 4742.0): [2, 0], (4738.0, 4743.0): [2, 7], (4738.0, 4744.0): [32, 8],
                     (4738.0, 4745.0): [1, 2], (4739.0, 4740.0): [2, 21], (4739.0, 4741.0): [15, 5],
                     (4739.0, 4742.0): [0, 1], (4739.0, 4743.0): [0, 3], (4739.0, 4744.0): [3, 7],
                     (4739.0, 4745.0): [61, 58], (4739.0, 4746.0): [3, 2], (4740.0, 4741.0): [14, 22],
                     (4740.0, 4742.0): [1, 19], (4740.0, 4744.0): [1, 2], (4740.0, 4745.0): [2, 15],
                     (4740.0, 4746.0): [32, 23], (4740.0, 4747.0): [22, 3], (4741.0, 4742.0): [1, 15],
                     (4741.0, 4743.0): [6, 0], (4741.0, 4744.0): [0, 1], (4741.0, 4745.0): [2, 0],
                     (4741.0, 4746.0): [4, 13], (4741.0, 4747.0): [25, 19], (4741.0, 4748.0): [14, 5],
                     (4742.0, 4743.0): [5, 11], (4742.0, 4744.0): [13, 0], (4742.0, 4747.0): [2, 2],
                     (4742.0, 4748.0): [7, 38], (4742.0, 4749.0): [0, 30], (4743.0, 4744.0): [5, 4],
                     (4743.0, 4745.0): [2, 0], (4743.0, 4747.0): [0, 2], (4743.0, 4748.0): [1, 2],
                     (4743.0, 4749.0): [4, 2], (4743.0, 4750.0): [2, 11], (4744.0, 4745.0): [12, 42],
                     (4744.0, 4746.0): [2, 4], (4744.0, 4747.0): [0, 1], (4744.0, 4748.0): [2, 7],
                     (4744.0, 4749.0): [1, 4], (4744.0, 4750.0): [5, 15], (4744.0, 4751.0): [11, 0],
                     (4745.0, 4746.0): [7, 23], (4745.0, 4747.0): [25, 27], (4745.0, 4748.0): [4, 1],
                     (4745.0, 4749.0): [10, 1], (4745.0, 4750.0): [5, 16], (4745.0, 4751.0): [13, 48],
                     (4746.0, 4747.0): [16, 29], (4746.0, 4748.0): [8, 0], (4746.0, 4750.0): [2, 3],
                     (4746.0, 4751.0): [3, 0], (4746.0, 4752.0): [5, 31], (4746.0, 4753.0): [1, 4],
                     (4747.0, 4748.0): [4, 5], (4747.0, 4749.0): [3, 6], (4747.0, 4750.0): [0, 1],
                     (4747.0, 4752.0): [1, 3], (4747.0, 4753.0): [20, 15], (4747.0, 4754.0): [4, 2],
                     (4748.0, 4749.0): [24, 8], (4748.0, 4750.0): [12, 0], (4748.0, 4751.0): [6, 0],
                     (4748.0, 4752.0): [2, 0], (4748.0, 4753.0): [22, 25], (4748.0, 4754.0): [45, 32],
                     (4748.0, 4755.0): [3, 3], (4749.0, 4750.0): [18, 23], (4749.0, 4751.0): [3, 0],
                     (4749.0, 4752.0): [4, 2], (4749.0, 4753.0): [15, 6], (4749.0, 4754.0): [4, 21],
                     (4749.0, 4755.0): [4, 36], (4749.0, 4756.0): [3, 19], (4750.0, 4751.0): [5, 16],
                     (4750.0, 4752.0): [32, 7], (4750.0, 4753.0): [0, 1], (4750.0, 4754.0): [2, 2],
                     (4750.0, 4755.0): [6, 1], (4750.0, 4756.0): [21, 9], (4750.0, 4757.0): [12, 0],
                     (4751.0, 4752.0): [4, 4], (4751.0, 4753.0): [3, 12], (4751.0, 4755.0): [18, 16],
                     (4751.0, 4756.0): [17, 1], (4751.0, 4757.0): [11, 2], (4751.0, 4758.0): [26, 0],
                     (4752.0, 4753.0): [2, 8], (4752.0, 4754.0): [5, 14], (4752.0, 4756.0): [2, 0],
                     (4752.0, 4757.0): [3, 1], (4752.0, 4758.0): [21, 28], (4752.0, 4759.0): [6, 0],
                     (4753.0, 4754.0): [17, 19], (4753.0, 4755.0): [7, 0], (4753.0, 4757.0): [3, 0],
                     (4753.0, 4759.0): [1, 3], (4753.0, 4760.0): [3, 3], (4754.0, 4755.0): [3, 4],
                     (4754.0, 4756.0): [11, 0], (4754.0, 4759.0): [2, 2], (4754.0, 4760.0): [4, 0],
                     (4754.0, 4761.0): [17, 3], (4755.0, 4756.0): [3, 12], (4755.0, 4757.0): [16, 4],
                     (4755.0, 4759.0): [1, 13], (4755.0, 4760.0): [7, 3], (4755.0, 4761.0): [6, 21],
                     (4755.0, 4762.0): [1, 19], (4756.0, 4757.0): [9, 1], (4756.0, 4758.0): [14, 4],
                     (4756.0, 4759.0): [0, 2], (4756.0, 4760.0): [0, 2], (4756.0, 4761.0): [2, 5],
                     (4756.0, 4762.0): [20, 0], (4756.0, 4763.0): [20, 13], (4757.0, 4758.0): [1, 7],
                     (4757.0, 4759.0): [6, 0], (4757.0, 4761.0): [0, 6], (4757.0, 4762.0): [8, 0],
                     (4757.0, 4763.0): [2, 2], (4757.0, 4764.0): [6, 14], (4758.0, 4759.0): [1, 2],
                     (4758.0, 4760.0): [2, 0], (4758.0, 4763.0): [4, 0], (4758.0, 4764.0): [22, 3],
                     (4759.0, 4760.0): [0, 4], (4759.0, 4761.0): [3, 0], (4759.0, 4762.0): [1, 0],
                     (4759.0, 4763.0): [0, 1], (4759.0, 4764.0): [25, 0], (4759.0, 4765.0): [2, 0],
                     (4760.0, 4761.0): [6, 0], (4760.0, 4762.0): [2, 1], (4760.0, 4764.0): [1, 11],
                     (4760.0, 4766.0): [2, 3], (4761.0, 4762.0): [3, 0], (4761.0, 4763.0): [1, 0],
                     (4761.0, 4764.0): [0, 1], (4762.0, 4763.0): [1, 0], (4762.0, 4764.0): [5, 0],
                     (4762.0, 4768.0): [1, 0], (4762.0, 4769.0): [1, 0], (4763.0, 4764.0): [11, 2],
                     (4763.0, 4765.0): [3, 0], (4763.0, 4766.0): [3, 0], (4763.0, 4767.0): [0, 1],
                     (4763.0, 4768.0): [0, 1], (4763.0, 4769.0): [1, 2], (4763.0, 4770.0): [1, 0],
                     (4764.0, 4765.0): [0, 10], (4764.0, 4766.0): [1, 0], (4764.0, 4770.0): [2, 0],
                     (4764.0, 4771.0): [9, 0], (4765.0, 4766.0): [1, 12], (4765.0, 4768.0): [0, 6],
                     (4765.0, 4769.0): [0, 6], (4765.0, 4771.0): [11, 5], (4765.0, 4772.0): [1, 18],
                     (4766.0, 4772.0): [0, 14], (4766.0, 4773.0): [20, 11], (4767.0, 4768.0): [1, 2],
                     (4767.0, 4769.0): [1, 4], (4767.0, 4771.0): [0, 5], (4767.0, 4772.0): [1, 19],
                     (4767.0, 4773.0): [1, 0], (4767.0, 4774.0): [10, 2], (4768.0, 4769.0): [0, 13],
                     (4768.0, 4772.0): [1, 0], (4768.0, 4773.0): [2, 2], (4768.0, 4774.0): [3, 24],
                     (4768.0, 4775.0): [1, 19], (4769.0, 4770.0): [0, 3], (4769.0, 4772.0): [2, 0],
                     (4769.0, 4773.0): [11, 0], (4769.0, 4774.0): [1, 12], (4769.0, 4775.0): [11, 27],
                     (4769.0, 4776.0): [1, 15], (4770.0, 4771.0): [3, 6], (4770.0, 4772.0): [1, 3],
                     (4770.0, 4773.0): [0, 3], (4770.0, 4774.0): [2, 1], (4770.0, 4775.0): [13, 2],
                     (4770.0, 4776.0): [12, 2], (4770.0, 4777.0): [33, 6], (4771.0, 4772.0): [1, 12],
                     (4771.0, 4773.0): [14, 0], (4771.0, 4774.0): [1, 1], (4771.0, 4775.0): [0, 1],
                     (4771.0, 4776.0): [11, 1], (4771.0, 4777.0): [31, 20], (4771.0, 4778.0): [19, 2],
                     (4772.0, 4773.0): [7, 11], (4772.0, 4774.0): [2, 8], (4772.0, 4775.0): [1, 5],
                     (4772.0, 4776.0): [6, 0], (4772.0, 4777.0): [7, 1], (4772.0, 4778.0): [27, 17],
                     (4772.0, 4779.0): [13, 40], (4773.0, 4774.0): [1, 36], (4773.0, 4775.0): [18, 0],
                     (4773.0, 4776.0): [3, 0], (4773.0, 4777.0): [0, 6], (4773.0, 4778.0): [9, 18],
                     (4773.0, 4779.0): [35, 26], (4773.0, 4780.0): [17, 13], (4774.0, 4775.0): [25, 42],
                     (4774.0, 4776.0): [2, 20], (4774.0, 4777.0): [1, 2], (4774.0, 4778.0): [4, 0],
                     (4774.0, 4779.0): [26, 26], (4774.0, 4780.0): [81, 56], (4774.0, 4781.0): [7, 45],
                     (4775.0, 4776.0): [16, 30], (4775.0, 4777.0): [19, 0], (4775.0, 4778.0): [1, 0],
                     (4775.0, 4779.0): [1, 2], (4775.0, 4780.0): [41, 17], (4775.0, 4781.0): [23, 9],
                     (4775.0, 4782.0): [4, 27], (4776.0, 4777.0): [2, 49], (4776.0, 4778.0): [1, 5],
                     (4776.0, 4779.0): [1, 2], (4776.0, 4780.0): [15, 16], (4776.0, 4781.0): [25, 38],
                     (4776.0, 4782.0): [42, 3], (4776.0, 4783.0): [29, 1], (4777.0, 4778.0): [29, 8],
                     (4777.0, 4779.0): [17, 12], (4777.0, 4780.0): [0, 1], (4777.0, 4781.0): [1, 3],
                     (4777.0, 4782.0): [3, 1], (4777.0, 4783.0): [38, 19], (4777.0, 4784.0): [4, 16],
                     (4778.0, 4779.0): [21, 2], (4778.0, 4780.0): [42, 12], (4778.0, 4781.0): [17, 0],
                     (4778.0, 4782.0): [1, 2], (4778.0, 4783.0): [13, 5], (4778.0, 4784.0): [39, 8],
                     (4778.0, 4785.0): [2, 2], (4779.0, 4780.0): [19, 12], (4779.0, 4781.0): [5, 15],
                     (4779.0, 4782.0): [1, 0], (4779.0, 4783.0): [0, 2], (4779.0, 4784.0): [32, 1],
                     (4779.0, 4785.0): [31, 23], (4779.0, 4786.0): [2, 3], (4780.0, 4781.0): [21, 30],
                     (4780.0, 4782.0): [18, 0], (4780.0, 4784.0): [24, 3], (4780.0, 4785.0): [2, 4],
                     (4780.0, 4786.0): [62, 9], (4780.0, 4787.0): [10, 29], (4781.0, 4782.0): [7, 5],
                     (4781.0, 4783.0): [5, 0], (4781.0, 4784.0): [1, 5], (4781.0, 4786.0): [21, 6],
                     (4781.0, 4787.0): [20, 52], (4781.0, 4788.0): [3, 0], (4782.0, 4783.0): [7, 20],
                     (4782.0, 4784.0): [27, 10], (4782.0, 4786.0): [1, 1], (4782.0, 4787.0): [6, 3],
                     (4782.0, 4788.0): [20, 57], (4782.0, 4789.0): [4, 9], (4783.0, 4784.0): [17, 44],
                     (4783.0, 4785.0): [39, 8], (4783.0, 4786.0): [0, 1], (4783.0, 4787.0): [2, 17],
                     (4783.0, 4788.0): [6, 11], (4783.0, 4789.0): [48, 15], (4783.0, 4790.0): [4, 27],
                     (4784.0, 4785.0): [5, 37], (4784.0, 4786.0): [11, 5], (4784.0, 4787.0): [16, 1],
                     (4784.0, 4788.0): [1, 19], (4784.0, 4789.0): [39, 39], (4784.0, 4790.0): [102, 38],
                     (4784.0, 4791.0): [12, 35], (4785.0, 4786.0): [7, 44], (4785.0, 4787.0): [7, 14],
                     (4785.0, 4788.0): [3, 1], (4785.0, 4789.0): [3, 17], (4785.0, 4790.0): [27, 6],
                     (4785.0, 4791.0): [68, 20], (4785.0, 4792.0): [11, 14], (4786.0, 4787.0): [5, 41],
                     (4786.0, 4788.0): [13, 5], (4786.0, 4789.0): [0, 6], (4786.0, 4790.0): [14, 10],
                     (4786.0, 4791.0): [32, 17], (4786.0, 4792.0): [60, 51], (4786.0, 4793.0): [9, 22],
                     (4787.0, 4788.0): [7, 44], (4787.0, 4789.0): [4, 24], (4787.0, 4790.0): [5, 2],
                     (4787.0, 4791.0): [4, 7], (4787.0, 4792.0): [7, 47], (4787.0, 4793.0): [60, 59],
                     (4787.0, 4794.0): [32, 2], (4788.0, 4789.0): [44, 48], (4788.0, 4790.0): [37, 12],
                     (4788.0, 4791.0): [7, 0], (4788.0, 4792.0): [4, 26], (4788.0, 4793.0): [8, 23],
                     (4788.0, 4794.0): [53, 29], (4788.0, 4795.0): [8, 25], (4789.0, 4790.0): [16, 39],
                     (4789.0, 4791.0): [25, 42], (4789.0, 4792.0): [4, 2], (4789.0, 4793.0): [13, 6],
                     (4789.0, 4794.0): [15, 44], (4789.0, 4795.0): [78, 28], (4789.0, 4796.0): [5, 53],
                     (4790.0, 4791.0): [8, 26], (4790.0, 4792.0): [12, 40], (4790.0, 4793.0): [6, 1],
                     (4790.0, 4794.0): [15, 4], (4790.0, 4795.0): [31, 3], (4790.0, 4796.0): [94, 43],
                     (4790.0, 4797.0): [16, 3], (4791.0, 4792.0): [15, 52], (4791.0, 4793.0): [24, 0],
                     (4791.0, 4795.0): [15, 5], (4791.0, 4796.0): [9, 18], (4791.0, 4797.0): [40, 45],
                     (4791.0, 4798.0): [19, 9], (4792.0, 4793.0): [34, 17], (4792.0, 4794.0): [12, 28],
                     (4792.0, 4795.0): [6, 6], (4792.0, 4796.0): [2, 14], (4792.0, 4797.0): [4, 28],
                     (4792.0, 4798.0): [43, 32], (4792.0, 4799.0): [32, 7], (4793.0, 4794.0): [21, 30],
                     (4793.0, 4795.0): [17, 25], (4793.0, 4796.0): [2, 0], (4793.0, 4797.0): [1, 10],
                     (4793.0, 4798.0): [10, 6], (4793.0, 4799.0): [28, 38], (4793.0, 4800.0): [21, 16],
                     (4794.0, 4795.0): [12, 14], (4794.0, 4796.0): [35, 5], (4794.0, 4797.0): [2, 7],
                     (4794.0, 4798.0): [9, 12], (4794.0, 4799.0): [4, 8], (4794.0, 4800.0): [34, 33],
                     (4794.0, 4801.0): [39, 30], (4795.0, 4796.0): [15, 22], (4795.0, 4797.0): [13, 1],
                     (4795.0, 4798.0): [14, 4], (4795.0, 4799.0): [18, 7], (4795.0, 4800.0): [0, 5],
                     (4795.0, 4801.0): [41, 26], (4795.0, 4802.0): [5, 12], (4796.0, 4797.0): [12, 18],
                     (4796.0, 4798.0): [22, 4], (4796.0, 4799.0): [13, 1], (4796.0, 4800.0): [11, 6],
                     (4796.0, 4801.0): [17, 26], (4796.0, 4802.0): [18, 28], (4796.0, 4803.0): [6, 3],
                     (4797.0, 4798.0): [28, 39], (4797.0, 4799.0): [34, 7], (4797.0, 4800.0): [5, 0],
                     (4797.0, 4801.0): [3, 2], (4797.0, 4802.0): [2, 20], (4797.0, 4803.0): [32, 20],
                     (4797.0, 4804.0): [27, 2], (4798.0, 4799.0): [12, 31], (4798.0, 4800.0): [37, 14],
                     (4798.0, 4801.0): [7, 1], (4798.0, 4802.0): [23, 3], (4798.0, 4803.0): [3, 12],
                     (4798.0, 4804.0): [25, 28], (4798.0, 4805.0): [1, 2], (4799.0, 4800.0): [32, 58],
                     (4799.0, 4801.0): [23, 10], (4799.0, 4802.0): [2, 0], (4799.0, 4803.0): [0, 3],
                     (4799.0, 4804.0): [27, 14], (4799.0, 4805.0): [31, 82], (4799.0, 4806.0): [25, 14],
                     (4800.0, 4801.0): [13, 17], (4800.0, 4802.0): [38, 25], (4800.0, 4803.0): [2, 4],
                     (4800.0, 4804.0): [21, 2], (4800.0, 4805.0): [7, 8], (4800.0, 4806.0): [8, 3],
                     (4800.0, 4807.0): [19, 12], (4801.0, 4802.0): [19, 55], (4801.0, 4803.0): [20, 15],
                     (4801.0, 4804.0): [0, 7], (4801.0, 4805.0): [5, 7], (4801.0, 4806.0): [11, 8],
                     (4801.0, 4807.0): [38, 106], (4801.0, 4808.0): [52, 27], (4802.0, 4803.0): [10, 54],
                     (4802.0, 4804.0): [20, 19], (4802.0, 4805.0): [2, 4], (4802.0, 4806.0): [5, 14],
                     (4802.0, 4807.0): [15, 9], (4802.0, 4808.0): [115, 57], (4802.0, 4809.0): [76, 38],
                     (4803.0, 4804.0): [8, 41], (4803.0, 4805.0): [59, 14], (4803.0, 4806.0): [3, 3],
                     (4803.0, 4807.0): [15, 21], (4803.0, 4808.0): [21, 12], (4803.0, 4809.0): [35, 50],
                     (4803.0, 4810.0): [17, 19], (4804.0, 4805.0): [36, 35], (4804.0, 4806.0): [38, 3],
                     (4804.0, 4807.0): [3, 0], (4804.0, 4808.0): [4, 2], (4804.0, 4809.0): [40, 21],
                     (4804.0, 4810.0): [93, 61], (4804.0, 4811.0): [46, 92], (4805.0, 4806.0): [27, 72],
                     (4805.0, 4807.0): [28, 15], (4805.0, 4808.0): [20, 9], (4805.0, 4809.0): [22, 14],
                     (4805.0, 4810.0): [19, 50], (4805.0, 4811.0): [73, 67], (4805.0, 4812.0): [30, 98],
                     (4806.0, 4807.0): [12, 109], (4806.0, 4808.0): [33, 25], (4806.0, 4809.0): [20, 13],
                     (4806.0, 4810.0): [4, 13], (4806.0, 4811.0): [54, 22], (4806.0, 4812.0): [107, 56],
                     (4806.0, 4813.0): [50, 73], (4807.0, 4808.0): [32, 84], (4807.0, 4809.0): [54, 19],
                     (4807.0, 4810.0): [18, 5], (4807.0, 4811.0): [26, 27], (4807.0, 4812.0): [49, 59],
                     (4807.0, 4813.0): [106, 82], (4807.0, 4814.0): [79, 39], (4808.0, 4809.0): [48, 40],
                     (4808.0, 4810.0): [52, 7], (4808.0, 4811.0): [4, 2], (4808.0, 4812.0): [11, 8],
                     (4808.0, 4813.0): [38, 46], (4808.0, 4814.0): [107, 151], (4808.0, 4815.0): [45, 23],
                     (4809.0, 4810.0): [27, 79], (4809.0, 4811.0): [37, 16], (4809.0, 4812.0): [7, 13],
                     (4809.0, 4813.0): [4, 5], (4809.0, 4814.0): [25, 40], (4809.0, 4815.0): [98, 40],
                     (4809.0, 4816.0): [32, 57], (4810.0, 4811.0): [67, 51], (4810.0, 4812.0): [95, 44],
                     (4810.0, 4813.0): [1, 1], (4810.0, 4814.0): [12, 4], (4810.0, 4815.0): [38, 17],
                     (4810.0, 4816.0): [104, 66], (4810.0, 4817.0): [60, 18], (4811.0, 4812.0): [30, 46],
                     (4811.0, 4813.0): [34, 59], (4811.0, 4814.0): [1, 7], (4811.0, 4815.0): [13, 3],
                     (4811.0, 4816.0): [63, 30], (4811.0, 4817.0): [76, 56], (4811.0, 4818.0): [21, 46],
                     (4812.0, 4813.0): [30, 45], (4812.0, 4814.0): [63, 14], (4812.0, 4815.0): [5, 26],
                     (4812.0, 4816.0): [2, 6], (4812.0, 4817.0): [16, 7], (4812.0, 4818.0): [44, 32],
                     (4812.0, 4819.0): [25, 38], (4813.0, 4814.0): [52, 36], (4813.0, 4815.0): [55, 15],
                     (4813.0, 4816.0): [1, 5], (4813.0, 4817.0): [10, 11], (4813.0, 4818.0): [30, 19],
                     (4813.0, 4819.0): [71, 74], (4813.0, 4820.0): [4, 34], (4814.0, 4815.0): [31, 75],
                     (4814.0, 4816.0): [16, 12], (4814.0, 4817.0): [1, 2], (4814.0, 4818.0): [14, 4],
                     (4814.0, 4819.0): [27, 6], (4814.0, 4820.0): [67, 24], (4814.0, 4821.0): [27, 20],
                     (4815.0, 4816.0): [51, 63], (4815.0, 4817.0): [27, 12], (4815.0, 4819.0): [11, 18],
                     (4815.0, 4820.0): [28, 13], (4815.0, 4821.0): [53, 22], (4815.0, 4822.0): [18, 22],
                     (4816.0, 4817.0): [31, 22], (4816.0, 4818.0): [39, 2], (4816.0, 4819.0): [2, 4],
                     (4816.0, 4820.0): [0, 15], (4816.0, 4821.0): [6, 7], (4816.0, 4822.0): [45, 22],
                     (4816.0, 4823.0): [17, 22], (4817.0, 4818.0): [27, 48], (4817.0, 4819.0): [15, 7],
                     (4817.0, 4821.0): [7, 4], (4817.0, 4822.0): [19, 4], (4817.0, 4823.0): [23, 9],
                     (4817.0, 4824.0): [50, 1], (4818.0, 4819.0): [13, 42], (4818.0, 4820.0): [59, 13],
                     (4818.0, 4821.0): [4, 3], (4818.0, 4822.0): [5, 1], (4818.0, 4823.0): [26, 13],
                     (4818.0, 4824.0): [60, 36], (4818.0, 4825.0): [38, 27], (4819.0, 4820.0): [10, 38],
                     (4819.0, 4821.0): [17, 12], (4819.0, 4822.0): [2, 3], (4819.0, 4823.0): [13, 2],
                     (4819.0, 4824.0): [2, 4], (4819.0, 4825.0): [84, 19], (4819.0, 4826.0): [43, 16],
                     (4820.0, 4821.0): [19, 46], (4820.0, 4822.0): [15, 3], (4820.0, 4823.0): [20, 3],
                     (4820.0, 4824.0): [2, 4], (4820.0, 4825.0): [13, 27], (4820.0, 4826.0): [20, 46],
                     (4820.0, 4827.0): [31, 3], (4821.0, 4822.0): [23, 24], (4821.0, 4823.0): [16, 7],
                     (4821.0, 4824.0): [5, 5], (4821.0, 4825.0): [0, 4], (4821.0, 4826.0): [5, 12],
                     (4821.0, 4827.0): [27, 31], (4821.0, 4828.0): [14, 55], (4822.0, 4823.0): [26, 6],
                     (4822.0, 4824.0): [28, 4], (4822.0, 4825.0): [0, 2], (4822.0, 4826.0): [0, 2],
                     (4822.0, 4827.0): [2, 1], (4822.0, 4828.0): [30, 34], (4822.0, 4829.0): [5, 3],
                     (4823.0, 4824.0): [23, 40], (4823.0, 4825.0): [24, 5], (4823.0, 4826.0): [0, 1],
                     (4823.0, 4827.0): [0, 2], (4823.0, 4829.0): [3, 20], (4824.0, 4825.0): [10, 4],
                     (4824.0, 4826.0): [21, 2], (4824.0, 4829.0): [1, 1], (4824.0, 4830.0): [23, 0],
                     (4824.0, 4831.0): [2, 9], (4825.0, 4826.0): [7, 5], (4825.0, 4827.0): [9, 15],
                     (4825.0, 4828.0): [1, 2], (4825.0, 4829.0): [1, 0], (4825.0, 4830.0): [2, 3],
                     (4825.0, 4831.0): [2, 2], (4825.0, 4832.0): [13, 7], (4826.0, 4827.0): [3, 32],
                     (4826.0, 4828.0): [1, 0], (4826.0, 4829.0): [1, 0], (4826.0, 4830.0): [0, 9],
                     (4826.0, 4831.0): [3, 7], (4826.0, 4832.0): [16, 12], (4826.0, 4833.0): [21, 12],
                     (4827.0, 4828.0): [8, 6], (4827.0, 4829.0): [1, 0], (4827.0, 4831.0): [0, 1],
                     (4827.0, 4832.0): [22, 12], (4827.0, 4833.0): [8, 5], (4827.0, 4834.0): [31, 12],
                     (4828.0, 4829.0): [4, 19], (4828.0, 4830.0): [7, 6], (4828.0, 4831.0): [1, 0],
                     (4828.0, 4832.0): [2, 0], (4828.0, 4833.0): [15, 7], (4828.0, 4834.0): [28, 45],
                     (4828.0, 4835.0): [12, 6], (4829.0, 4830.0): [0, 7], (4829.0, 4831.0): [6, 5],
                     (4829.0, 4832.0): [1, 5], (4829.0, 4833.0): [3, 1], (4829.0, 4834.0): [14, 5],
                     (4829.0, 4835.0): [30, 47], (4829.0, 4836.0): [6, 33], (4830.0, 4831.0): [2, 23],
                     (4830.0, 4832.0): [17, 13], (4830.0, 4834.0): [31, 10], (4830.0, 4835.0): [14, 19],
                     (4830.0, 4836.0): [37, 22], (4830.0, 4837.0): [42, 22], (4831.0, 4832.0): [14, 28],
                     (4831.0, 4833.0): [32, 14], (4831.0, 4834.0): [11, 3], (4831.0, 4835.0): [2, 3],
                     (4831.0, 4836.0): [25, 14], (4831.0, 4837.0): [32, 43], (4831.0, 4838.0): [28, 14],
                     (4832.0, 4833.0): [23, 24], (4832.0, 4834.0): [9, 1], (4832.0, 4835.0): [0, 1],
                     (4832.0, 4836.0): [2, 2], (4832.0, 4837.0): [29, 2], (4832.0, 4838.0): [39, 4],
                     (4832.0, 4839.0): [27, 4], (4833.0, 4834.0): [4, 0], (4833.0, 4835.0): [28, 6],
                     (4833.0, 4836.0): [2, 0], (4833.0, 4837.0): [0, 2], (4833.0, 4838.0): [1, 0],
                     (4833.0, 4839.0): [11, 4], (4833.0, 4840.0): [20, 18], (4834.0, 4835.0): [18, 12],
                     (4834.0, 4836.0): [10, 1], (4834.0, 4838.0): [3, 0], (4834.0, 4839.0): [1, 4],
                     (4834.0, 4840.0): [2, 14], (4834.0, 4841.0): [2, 7], (4835.0, 4836.0): [23, 44],
                     (4835.0, 4837.0): [30, 5], (4835.0, 4838.0): [3, 0], (4835.0, 4839.0): [2, 2],
                     (4835.0, 4840.0): [4, 6], (4835.0, 4841.0): [28, 8], (4835.0, 4842.0): [39, 24],
                     (4836.0, 4837.0): [6, 22], (4836.0, 4838.0): [12, 0], (4836.0, 4839.0): [0, 1],
                     (4836.0, 4841.0): [1, 3], (4836.0, 4842.0): [4, 1], (4836.0, 4843.0): [4, 10],
                     (4837.0, 4838.0): [24, 12], (4837.0, 4839.0): [23, 1], (4837.0, 4840.0): [3, 0],
                     (4837.0, 4841.0): [1, 18], (4837.0, 4842.0): [3, 3], (4837.0, 4843.0): [13, 17],
                     (4837.0, 4844.0): [11, 9], (4838.0, 4839.0): [2, 3], (4838.0, 4840.0): [1, 0],
                     (4838.0, 4841.0): [2, 0], (4838.0, 4843.0): [1, 3], (4838.0, 4844.0): [7, 2],
                     (4838.0, 4845.0): [21, 11], (4839.0, 4840.0): [2, 3], (4839.0, 4841.0): [8, 5],
                     (4839.0, 4842.0): [0, 4], (4839.0, 4843.0): [0, 2], (4839.0, 4844.0): [10, 5],
                     (4839.0, 4845.0): [28, 12], (4839.0, 4846.0): [1, 2], (4840.0, 4841.0): [5, 5],
                     (4840.0, 4842.0): [7, 1], (4840.0, 4843.0): [1, 0], (4840.0, 4845.0): [4, 2],
                     (4840.0, 4846.0): [2, 22], (4840.0, 4847.0): [31, 0], (4841.0, 4842.0): [6, 6],
                     (4841.0, 4843.0): [10, 10], (4841.0, 4844.0): [2, 0], (4841.0, 4845.0): [0, 2],
                     (4841.0, 4846.0): [0, 3], (4841.0, 4847.0): [5, 3], (4841.0, 4848.0): [2, 9],
                     (4842.0, 4843.0): [5, 6], (4842.0, 4844.0): [3, 18], (4842.0, 4845.0): [2, 0],
                     (4842.0, 4846.0): [1, 0], (4842.0, 4847.0): [10, 8], (4842.0, 4848.0): [24, 3],
                     (4842.0, 4849.0): [17, 23], (4843.0, 4844.0): [3, 0], (4843.0, 4845.0): [15, 0],
                     (4843.0, 4847.0): [3, 13], (4843.0, 4848.0): [6, 22], (4843.0, 4849.0): [25, 10],
                     (4843.0, 4850.0): [1, 0], (4844.0, 4845.0): [3, 18], (4844.0, 4846.0): [13, 5],
                     (4844.0, 4848.0): [1, 0], (4844.0, 4849.0): [4, 10], (4844.0, 4850.0): [18, 20],
                     (4844.0, 4851.0): [13, 13], (4845.0, 4846.0): [22, 1], (4845.0, 4847.0): [5, 5],
                     (4845.0, 4849.0): [1, 0], (4845.0, 4850.0): [2, 0], (4845.0, 4851.0): [29, 2],
                     (4845.0, 4852.0): [10, 15], (4846.0, 4847.0): [8, 4], (4846.0, 4848.0): [3, 10],
                     (4846.0, 4850.0): [5, 12], (4846.0, 4851.0): [6, 11], (4846.0, 4852.0): [6, 19],
                     (4846.0, 4853.0): [2, 10], (4847.0, 4848.0): [2, 23], (4847.0, 4849.0): [3, 4],
                     (4847.0, 4851.0): [1, 0], (4847.0, 4852.0): [4, 1], (4847.0, 4853.0): [10, 2],
                     (4847.0, 4854.0): [5, 9], (4848.0, 4849.0): [1, 16], (4848.0, 4850.0): [3, 2],
                     (4848.0, 4853.0): [3, 0], (4848.0, 4854.0): [5, 9], (4848.0, 4855.0): [14, 0],
                     (4849.0, 4850.0): [4, 0], (4849.0, 4851.0): [2, 4], (4849.0, 4854.0): [1, 5],
                     (4849.0, 4855.0): [3, 17], (4849.0, 4856.0): [0, 4], (4850.0, 4851.0): [2, 1],
                     (4850.0, 4852.0): [5, 1], (4850.0, 4853.0): [0, 20], (4850.0, 4855.0): [0, 16],
                     (4850.0, 4856.0): [22, 2], (4850.0, 4857.0): [3, 2], (4851.0, 4852.0): [2, 17],
                     (4851.0, 4853.0): [19, 0], (4851.0, 4854.0): [1, 0], (4851.0, 4855.0): [0, 14],
                     (4851.0, 4856.0): [1, 1], (4851.0, 4857.0): [0, 10], (4851.0, 4858.0): [2, 3],
                     (4852.0, 4853.0): [4, 28], (4852.0, 4854.0): [9, 0], (4852.0, 4856.0): [1, 0],
                     (4852.0, 4857.0): [3, 4], (4852.0, 4858.0): [16, 2], (4852.0, 4859.0): [2, 16],
                     (4853.0, 4854.0): [2, 21], (4853.0, 4855.0): [2, 0], (4853.0, 4856.0): [0, 2],
                     (4853.0, 4857.0): [0, 3], (4853.0, 4858.0): [3, 1], (4853.0, 4859.0): [12, 22],
                     (4853.0, 4860.0): [6, 24], (4854.0, 4855.0): [2, 11], (4854.0, 4856.0): [3, 0],
                     (4854.0, 4857.0): [2, 1], (4854.0, 4859.0): [1, 1], (4854.0, 4860.0): [1, 1],
                     (4854.0, 4861.0): [4, 2], (4855.0, 4856.0): [21, 1], (4855.0, 4857.0): [1, 0],
                     (4855.0, 4859.0): [1, 0], (4855.0, 4860.0): [1, 1], (4855.0, 4861.0): [21, 3],
                     (4855.0, 4862.0): [1, 8], (4856.0, 4857.0): [3, 1], (4856.0, 4858.0): [5, 1],
                     (4856.0, 4860.0): [2, 4], (4856.0, 4862.0): [2, 1], (4857.0, 4858.0): [3, 0],
                     (4857.0, 4859.0): [8, 0], (4857.0, 4860.0): [3, 0], (4857.0, 4861.0): [4, 0],
                     (4857.0, 4863.0): [7, 0], (4857.0, 4864.0): [1, 0], (4858.0, 4859.0): [4, 2],
                     (4858.0, 4860.0): [3, 0], (4858.0, 4862.0): [0, 2], (4858.0, 4863.0): [5, 10],
                     (4858.0, 4865.0): [17, 14], (4859.0, 4860.0): [26, 19], (4859.0, 4861.0): [14, 0],
                     (4859.0, 4862.0): [1, 0], (4859.0, 4863.0): [2, 0], (4859.0, 4864.0): [21, 26],
                     (4859.0, 4865.0): [12, 13], (4859.0, 4866.0): [41, 9], (4860.0, 4861.0): [3, 30],
                     (4860.0, 4862.0): [19, 10], (4860.0, 4864.0): [16, 1], (4860.0, 4865.0): [24, 19],
                     (4860.0, 4866.0): [36, 22], (4860.0, 4867.0): [3, 0], (4861.0, 4862.0): [1, 22],
                     (4861.0, 4863.0): [0, 5], (4861.0, 4864.0): [1, 4], (4861.0, 4865.0): [7, 0],
                     (4861.0, 4866.0): [1, 6], (4861.0, 4867.0): [38, 41], (4861.0, 4868.0): [2, 48],
                     (4862.0, 4863.0): [16, 29], (4862.0, 4864.0): [1, 4], (4862.0, 4865.0): [2, 1],
                     (4862.0, 4866.0): [1, 2], (4862.0, 4867.0): [17, 0], (4862.0, 4868.0): [16, 16],
                     (4862.0, 4869.0): [3, 0], (4863.0, 4864.0): [9, 7], (4863.0, 4865.0): [6, 1],
                     (4863.0, 4866.0): [10, 0], (4863.0, 4867.0): [2, 1], (4863.0, 4868.0): [18, 1],
                     (4863.0, 4869.0): [2, 1], (4863.0, 4870.0): [4, 2], (4864.0, 4865.0): [16, 17],
                     (4864.0, 4866.0): [10, 0], (4864.0, 4868.0): [0, 2], (4864.0, 4870.0): [26, 2],
                     (4864.0, 4871.0): [2, 12], (4865.0, 4866.0): [15, 11], (4865.0, 4867.0): [23, 0],
                     (4865.0, 4868.0): [1, 0], (4865.0, 4870.0): [25, 0], (4865.0, 4871.0): [4, 4],
                     (4865.0, 4872.0): [1, 0], (4866.0, 4867.0): [4, 48], (4866.0, 4868.0): [26, 7],
                     (4866.0, 4869.0): [2, 0], (4866.0, 4871.0): [3, 6], (4866.0, 4872.0): [23, 19],
                     (4866.0, 4873.0): [23, 53], (4867.0, 4868.0): [4, 1], (4867.0, 4869.0): [3, 0],
                     (4867.0, 4871.0): [11, 4], (4867.0, 4872.0): [16, 6], (4867.0, 4873.0): [7, 2],
                     (4867.0, 4874.0): [2, 0], (4868.0, 4869.0): [0, 12], (4868.0, 4870.0): [0, 2],
                     (4868.0, 4872.0): [1, 2], (4868.0, 4873.0): [11, 2], (4868.0, 4874.0): [28, 1],
                     (4868.0, 4875.0): [2, 17], (4869.0, 4870.0): [2, 14], (4869.0, 4871.0): [3, 0],
                     (4869.0, 4872.0): [0, 2], (4869.0, 4873.0): [0, 1], (4869.0, 4874.0): [4, 14],
                     (4869.0, 4875.0): [31, 7], (4869.0, 4876.0): [0, 2], (4870.0, 4871.0): [29, 14],
                     (4870.0, 4872.0): [2, 0], (4870.0, 4874.0): [1, 0], (4870.0, 4875.0): [4, 2],
                     (4870.0, 4876.0): [26, 8], (4871.0, 4872.0): [6, 0], (4871.0, 4873.0): [3, 0],
                     (4871.0, 4875.0): [2, 1], (4871.0, 4876.0): [6, 0], (4871.0, 4877.0): [38, 27],
                     (4871.0, 4878.0): [8, 1], (4872.0, 4873.0): [4, 10], (4872.0, 4874.0): [0, 20],
                     (4872.0, 4876.0): [1, 0], (4872.0, 4877.0): [0, 2], (4872.0, 4878.0): [20, 2],
                     (4872.0, 4879.0): [28, 16], (4873.0, 4874.0): [19, 14], (4873.0, 4875.0): [7, 2],
                     (4873.0, 4876.0): [0, 2], (4873.0, 4878.0): [0, 2], (4873.0, 4879.0): [3, 1],
                     (4873.0, 4880.0): [1, 0], (4874.0, 4875.0): [2, 1], (4874.0, 4876.0): [4, 0],
                     (4874.0, 4877.0): [3, 0], (4874.0, 4879.0): [10, 0], (4874.0, 4880.0): [9, 1],
                     (4874.0, 4881.0): [0, 1], (4875.0, 4876.0): [2, 3], (4875.0, 4877.0): [3, 0],
                     (4875.0, 4878.0): [2, 0], (4875.0, 4879.0): [0, 1], (4875.0, 4880.0): [0, 1],
                     (4875.0, 4882.0): [12, 5], (4876.0, 4877.0): [17, 2], (4876.0, 4878.0): [16, 0],
                     (4876.0, 4881.0): [3, 1], (4877.0, 4878.0): [15, 6], (4877.0, 4879.0): [2, 0],
                     (4877.0, 4882.0): [1, 2], (4877.0, 4883.0): [1, 0], (4877.0, 4884.0): [17, 2],
                     (4878.0, 4879.0): [4, 1], (4878.0, 4880.0): [4, 0], (4878.0, 4881.0): [0, 1],
                     (4878.0, 4883.0): [6, 2], (4878.0, 4884.0): [1, 19], (4879.0, 4880.0): [0, 24],
                     (4879.0, 4881.0): [17, 0], (4879.0, 4885.0): [4, 0], (4879.0, 4886.0): [55, 17],
                     (4880.0, 4881.0): [4, 3], (4880.0, 4882.0): [5, 0], (4880.0, 4884.0): [3, 0],
                     (4880.0, 4885.0): [2, 5], (4880.0, 4886.0): [6, 0], (4880.0, 4887.0): [14, 0],
                     (4881.0, 4882.0): [1, 9], (4881.0, 4884.0): [0, 1], (4881.0, 4885.0): [2, 0],
                     (4881.0, 4886.0): [1, 23], (4881.0, 4887.0): [3, 11], (4881.0, 4888.0): [18, 7],
                     (4882.0, 4883.0): [0, 10], (4882.0, 4884.0): [4, 0], (4882.0, 4887.0): [16, 1],
                     (4882.0, 4888.0): [4, 3], (4882.0, 4889.0): [2, 0], (4883.0, 4884.0): [3, 2],
                     (4883.0, 4885.0): [9, 6], (4883.0, 4889.0): [3, 0], (4883.0, 4890.0): [0, 1],
                     (4884.0, 4885.0): [0, 5], (4884.0, 4886.0): [9, 2], (4884.0, 4889.0): [0, 2],
                     (4884.0, 4891.0): [2, 0], (4885.0, 4886.0): [3, 3], (4885.0, 4887.0): [17, 12],
                     (4885.0, 4888.0): [1, 0], (4885.0, 4891.0): [4, 0], (4885.0, 4892.0): [21, 1],
                     (4886.0, 4887.0): [5, 0], (4886.0, 4888.0): [1, 0], (4886.0, 4892.0): [1, 0],
                     (4886.0, 4893.0): [0, 3], (4887.0, 4889.0): [1, 2], (4887.0, 4891.0): [1, 1],
                     (4887.0, 4892.0): [0, 1], (4887.0, 4893.0): [17, 0], (4888.0, 4889.0): [1, 0],
                     (4889.0, 4890.0): [2, 0], (4889.0, 4891.0): [1, 0], (4889.0, 4893.0): [0, 1],
                     (4890.0, 4891.0): [1, 0], (4890.0, 4892.0): [1, 0]}

                order_depth: OrderDepth = state.order_depths[product]

                orders: list[Order] = []
                if product in state.position.keys():
                    q = state.position[product]
                else:
                    q = 0

                if len(order_depth.sell_orders) > 0:
                    best_ask = min(order_depth.sell_orders.keys())
                    best_ask_volume = order_depth.sell_orders[best_ask]
                    tot = 0
                    vol = 0
                    ctr = 0
                    for key in sorted(order_depth.sell_orders.keys()):
                        if ctr == 3:
                            break
                        else:
                            tot += key * order_depth.sell_orders[key]
                            vol += order_depth.sell_orders[key]
                            ctr += 1
                    ask_vwap = tot / vol

                if len(order_depth.buy_orders) != 0:
                    best_bid = max(order_depth.buy_orders.keys())
                    best_bid_volume = order_depth.buy_orders[best_bid]
                    tot = 0
                    vol = 0
                    ctr = 0
                    for key in sorted(order_depth.buy_orders.keys()):
                        if ctr == 3:
                            break
                        else:
                            tot += key * order_depth.buy_orders[key]
                            vol += order_depth.buy_orders[key]
                            ctr += 1
                    bid_vwap = tot / vol

                self.b_mid.append((bid_vwap + ask_vwap) / 2)
                self.b_spread.append(best_ask - best_bid)

                if len(self.b_mid) < 5:
                    mu = round(statistics.fmean(self.b_mid))
                else:
                    mu = round(statistics.fmean(self.b_mid[len(self.b_mid) - 6:]))
                spread = round(statistics.fmean(self.b_spread))

                if (best_bid, best_ask) not in D.keys():
                    orders.append(Order(product, mu + spread // 2, (-q - limit)))
                    orders.append(Order(product, mu - spread // 2, (limit - q)))

                else:

                    p = D[(best_bid, best_ask)][0] / (D[(best_bid, best_ask)][0] + D[(best_bid, best_ask)][1])
                    if p == 1:
                        p = 0.99
                    if p == 0:
                        p = 0.01
                    func = (p * (limit - q) + q) / (1 - p)
                    sell_qty = math.floor(min(limit + q, max(0, func)))
                    buy_qty = math.floor(((1 - p) * sell_qty - q) / p)

                    buy_qty = min(limit - q, max(0, buy_qty))

                    f = 0

                    if best_ask > mu and best_bid < mu:
                        if q < 0:
                            orders.append(Order(product, best_ask, -math.ceil(sell_qty * f)))
                            orders.append(Order(product, best_ask - 1, -math.floor(sell_qty * (1 - f))))
                            orders.append(Order(product, best_bid + 1, math.floor(buy_qty * (1 - f))))
                            orders.append(Order(product, best_bid, math.floor(buy_qty * f)))
                        if q >= 0:
                            orders.append(Order(product, best_ask, -math.ceil(sell_qty * f)))
                            orders.append(Order(product, best_ask - 1, -math.floor(sell_qty * (1 - f))))
                            orders.append(Order(product, best_bid + 1, math.floor(buy_qty * (1 - f))))
                            orders.append(Order(product, best_bid, math.floor(buy_qty * f)))

                    elif best_bid >= mu:
                        if best_bid == mu:
                            if q >= 0:

                                orders.append(Order(product, best_bid + 1, -sell_qty))
                            else:

                                orders.append(Order(product, best_bid + 1, -math.ceil(sell_qty)))
                        else:

                            if q >= 0:

                                orders.append(Order(product, best_bid, -math.ceil(sell_qty * f)))
                                orders.append(Order(product, best_bid - 1, -math.floor(sell_qty * (1 - f))))
                            else:

                                orders.append(Order(product, best_bid, -math.ceil(sell_qty * f)))
                                orders.append(Order(product, best_bid - 1, -math.floor(sell_qty * (1 - f))))
                    else:
                        if best_ask == mu:
                            if q <= 0:

                                orders.append(Order(product, best_ask - 1, buy_qty))
                            else:

                                orders.append(Order(product, best_ask - 1, math.ceil(buy_qty)))

                        else:
                            if q <= 0:

                                orders.append(Order(product, best_ask, math.ceil(buy_qty * f)))
                                orders.append(Order(product, best_ask + 1, math.ceil(buy_qty * (1 - f))))
                            else:

                                orders.append(Order(product, best_ask, math.ceil(buy_qty * f)))
                                orders.append(Order(product, best_ask + 1, math.floor(buy_qty * (1 - f))))

                result[product] = orders

        #print(f'Will trade {result}')
        conversions = 1
        traderData = "SAMPLE"

        logger.flush(state, result, conversions, traderData)
        return result, conversions, traderData

    def compute_orders_AMETHYSTS(self, product, order_depth, acc_bid, acc_ask):
        # Only method required. It takes all buy and sell orders for all symbols as an input, and outputs a list of orders to be sent
        orders: list[Order] = []
        osell = collections.OrderedDict(sorted(order_depth.sell_orders.items()))
        obuy = collections.OrderedDict(sorted(order_depth.buy_orders.items(), reverse=True))

        sell_vol, best_sell_pr = self.values_extract(osell)
        buy_vol, best_buy_pr = self.values_extract(obuy, 1)

        cpos = self.position[product]

        mx_with_buy = -1

        for ask, vol in osell.items():
            if ((ask < acc_bid) or ((self.position[product] < 0) and (ask == acc_bid))) and cpos < self.POSITION_LIMIT[
                'AMETHYSTS']:
                mx_with_buy = max(mx_with_buy, ask)
                order_for = min(-vol, self.POSITION_LIMIT['AMETHYSTS'] - cpos)
                cpos += order_for
                assert (order_for >= 0)
                orders.append(Order(product, ask, order_for))

        mprice_actual = (best_sell_pr + best_buy_pr) / 2
        mprice_ours = (acc_bid + acc_ask) / 2

        undercut_buy = best_buy_pr + 1
        undercut_sell = best_sell_pr - 1

        bid_pr = min(undercut_buy, acc_bid - 1)  # we will shift this by 1 to beat this price
        sell_pr = max(undercut_sell, acc_ask + 1)

        if (cpos < self.POSITION_LIMIT['AMETHYSTS']) and (self.position[product] < 0):
            num = min(40, self.POSITION_LIMIT['AMETHYSTS'] - cpos)
            orders.append(Order(product, min(undercut_buy + 1, acc_bid - 1), num))
            cpos += num

        if (cpos < self.POSITION_LIMIT['AMETHYSTS']) and (self.position[product] > 15):
            num = min(40, self.POSITION_LIMIT['AMETHYSTS'] - cpos)
            orders.append(Order(product, min(undercut_buy - 1, acc_bid - 1), num))
            cpos += num

        if cpos < self.POSITION_LIMIT['AMETHYSTS']:
            num = min(40, self.POSITION_LIMIT['AMETHYSTS'] - cpos)
            orders.append(Order(product, bid_pr, num))
            cpos += num

        cpos = self.position[product]

        for bid, vol in obuy.items():
            if ((bid > acc_ask) or ((self.position[product] > 0) and (bid == acc_ask))) and cpos > -self.POSITION_LIMIT[
                'AMETHYSTS']:
                order_for = max(-vol, -self.POSITION_LIMIT['AMETHYSTS'] - cpos)
                # order_for is a negative number denoting how much we will sell
                cpos += order_for
                assert (order_for <= 0)
                orders.append(Order(product, bid, order_for))

        if (cpos > -self.POSITION_LIMIT['AMETHYSTS']) and (self.position[product] > 0):
            num = max(-40, -self.POSITION_LIMIT['AMETHYSTS'] - cpos)
            orders.append(Order(product, max(undercut_sell - 1, acc_ask + 1), num))
            cpos += num

        if (cpos > -self.POSITION_LIMIT['AMETHYSTS']) and (self.position[product] < -15):
            num = max(-40, -self.POSITION_LIMIT['AMETHYSTS'] - cpos)
            orders.append(Order(product, max(undercut_sell + 1, acc_ask + 1), num))
            cpos += num

        if cpos > -self.POSITION_LIMIT['AMETHYSTS']:
            num = max(-40, -self.POSITION_LIMIT['AMETHYSTS'] - cpos)
            orders.append(Order(product, sell_pr, num))
            cpos += num
        return orders